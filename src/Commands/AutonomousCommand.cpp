// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {

	//gameData=frc::DriverStation::GetInstance().GetGameSpecificMessage();
	//position=frc::DriverStation::GetInstance().GetLocation();
	//count = 0;

}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	//Robot::drive->driveForward();
	//count++;
	/*if(gameData.length()>0){
		if(gameData[0]=='L'){
			if(position==1){
				//Left Switch, Left Start
			}else if(position==2){
				//Left Switch, Middle Start
			}else if(position==3){
				//Left Switch, Right Start
			}else{
				//Left Switch, Invalid Start
			}
		}else{
			if(position==1){
				//Right Switch, Left Start
			}else if(position==2){
				//Right Switch, Middle Start
			}else if(position==3){
				//Right Switch, Right Start
			}else{
				//Right Switch, Invalid Start
			}
		}
	}*/

}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return true;
    /*if(count >= 50){
    	return true;
    }else{
    	return false;
    }*/
}

// Called once after isFinished returns true
void AutonomousCommand::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
