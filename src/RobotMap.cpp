// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveFrontL;
std::shared_ptr<frc::SpeedController> RobotMap::driveBackL;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveLeftGroup;
std::shared_ptr<frc::SpeedController> RobotMap::driveFrontR;
std::shared_ptr<frc::SpeedController> RobotMap::driveBackR;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveRightGroup;
std::shared_ptr<frc::DifferentialDrive> RobotMap::driveDrive;
std::shared_ptr<frc::Compressor> RobotMap::jawsCompressor;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::clawClampRight;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::clawClampLeft;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::clawCronch;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::clawLift;
std::shared_ptr<frc::SpeedController> RobotMap::leftWheel;
std::shared_ptr<frc::SpeedController> RobotMap::rightWheel;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::succ;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveFrontL.reset(new frc::VictorSP(0));
    lw->AddActuator("Drive", "FrontL", std::static_pointer_cast<frc::VictorSP>(driveFrontL));
    
    driveBackL.reset(new frc::VictorSP(1));
    lw->AddActuator("Drive", "BackL", std::static_pointer_cast<frc::VictorSP>(driveBackL));
    
    driveLeftGroup = std::make_shared<frc::SpeedControllerGroup>(*driveFrontL, *driveBackL  );
    lw->AddActuator("Drive", "LeftGroup", driveLeftGroup);
    
    driveFrontR.reset(new frc::VictorSP(2));
    lw->AddActuator("Drive", "FrontR", std::static_pointer_cast<frc::VictorSP>(driveFrontR));
    
    driveBackR.reset(new frc::VictorSP(3));
    lw->AddActuator("Drive", "BackR", std::static_pointer_cast<frc::VictorSP>(driveBackR));
    
    driveRightGroup = std::make_shared<frc::SpeedControllerGroup>(*driveFrontR, *driveBackR  );
    lw->AddActuator("Drive", "RightGroup", driveRightGroup);
    
    driveDrive.reset(new frc::DifferentialDrive(*driveLeftGroup, *driveRightGroup));
    lw->AddActuator("Drive", "Drive", driveDrive);
    driveDrive->SetSafetyEnabled(true);
        driveDrive->SetExpiration(0.1);
        driveDrive->SetMaxOutput(1.0);

    jawsCompressor.reset(new frc::Compressor(0));
    lw->AddActuator("Jaws", "Compressor", jawsCompressor);
    
    clawClampRight.reset(new frc::DoubleSolenoid(0, 0, 1));
    lw->AddActuator("JawClamp", "ClawClampRight", clawClampRight);
    
    clawClampLeft.reset(new frc::DoubleSolenoid(0, 4, 5));
    lw->AddActuator("JawClamp", "ClawClampLeft", clawClampLeft);

    clawCronch.reset(new frc::DoubleSolenoid(0, 6, 7));
    lw->AddActuator("JawClamp", "ClawCronch", clawCronch);

    clawLift.reset(new frc::DoubleSolenoid(0, 2, 3));
    lw->AddActuator("JawLift", "ClawLift", clawLift);

    rightWheel.reset(new frc::Spark(4));
    lw->AddActuator("Succ","RightWheel",std::static_pointer_cast<frc::Spark>(rightWheel));

    leftWheel.reset(new frc::Spark(6));
    lw->AddActuator("Succ","LeftWheel",std::static_pointer_cast<frc::Spark>(leftWheel));

    leftWheel->SetInverted(true);

    succ = std::make_shared<frc::SpeedControllerGroup>(*leftWheel, *rightWheel  );
    lw->AddActuator("Succ", "Succ", succ);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
